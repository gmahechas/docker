apiVersion: v1
kind: Namespace
metadata:
  name: redis-namespace
  labels:
    app.kubernetes.io/name: redis-namespace
    app.kubernetes.io/instance: redis-namespace
    app.kubernetes.io/version: "1.0.0"
---
apiVersion: v1
kind: LimitRange
metadata:
  name: redis-limit-range
  labels:
    app.kubernetes.io/name: redis-limit-range
    app.kubernetes.io/instance: redis-limit-range
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  limits:
  - max:
      cpu: "2"
      memory: "2Gi"
    min:
      cpu: "1"
      memory: "1Gi"
    default: # limit
      cpu: "2"
      memory: "2Gi" 
    defaultRequest:
      cpu: "1"
      memory: "1Gi"
    type: Container
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: redis-resource-quota
  labels:
    app.kubernetes.io/name: redis-resource-quota
    app.kubernetes.io/instance: redis-resource-quota
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  hard:
    limits.cpu: "2"
    limits.memory: 2Gi
    requests.cpu: "1"
    requests.memory: 1Gi
    pods: "1"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-persistent-volume
  labels:
    app.kubernetes.io/name: redis-persistent-volume
    app.kubernetes.io/instance: redis-persistent-volume
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  storageClassName: manual
  #persistentVolumeReclaimPolicy: Recycle
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 2Gi
  hostPath:
    path: "/mnt/redis"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-persistent-volume-claim
  labels:
    app.kubernetes.io/name: redis-persistent-volume-claim
    app.kubernetes.io/instance: redis-persistent-volume-claim
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  selector: 
    matchLabels:
      app.kubernetes.io/name: redis-persistent-volume
      app.kubernetes.io/instance: redis-persistent-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app.kubernetes.io/name: redis-deployment
    app.kubernetes.io/instance: redis-deployment
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-pod
      app.kubernetes.io/instance: redis-pod
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-pod
        app.kubernetes.io/instance: redis-pod
        app.kubernetes.io/version: "1.0.0"
    spec:
      containers:
      - name: redis
        image: redis:6.0.9-alpine
        resources:
          requests:
            memory: "1Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "2"
        ports:
          - containerPort: 6379
        volumeMounts:
          - mountPath: "/data"
            name: redis-volume
      volumes:
        - name: redis-volume
          persistentVolumeClaim:
            claimName: redis-persistent-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app.kubernetes.io/name: redis-service
    app.kubernetes.io/instance: redis-service
    app.kubernetes.io/version: "1.0.0"
  namespace: redis-namespace
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: redis-pod
    app.kubernetes.io/instance: redis-pod
  ports:
    - name: redis-port
      protocol: TCP
      nodePort: 30002
      port: 6379
      targetPort: 6379