services:
  mongodb1:
    container_name: mongodb1
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb1'
    cpus: 1.0
    mem_limit: 1g
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "30001", "--sslMode", "requireSSL", "--sslPEMKeyFile", "/etc/ssl/mongo.pem", "--sslCAFile", "/etc/ssl/ca.crt"]
    volumes:
      - mongodb1_data:/data/db
      - ./certificate:/etc/ssl
    ports:
      - "30001:30001"
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb1:30001\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --ssl --sslCAFile /etc/ssl/ca.crt --sslPEMKeyFile /etc/ssl/mongo.pem --host mongodb1 --port 30001 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb2:
    container_name: mongodb2
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb2'
    cpus: 1.0
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "30002", "--sslMode", "requireSSL", "--sslPEMKeyFile", "/etc/ssl/mongo.pem", "--sslCAFile", "/etc/ssl/ca.crt"]
    volumes:
      - mongodb2_data:/data/db
      - ./certificate:/etc/ssl
    ports:
      - "30002:30002"
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb2:30002\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --ssl --sslCAFile /etc/ssl/ca.crt --sslPEMKeyFile /etc/ssl/mongo.pem --host mongodb2 --port 30002 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb3:
    container_name: mongodb3
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb3'
    cpus: 1.0
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "30003", "--sslMode", "requireSSL", "--sslPEMKeyFile", "/etc/ssl/mongo.pem", "--sslCAFile", "/etc/ssl/ca.crt"]
    volumes:
      - mongodb3_data:/data/db
      - ./certificate:/etc/ssl
    ports:
      - "30003:30003"
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb3:30003\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --ssl --sslCAFile /etc/ssl/ca.crt --sslPEMKeyFile /etc/ssl/mongo.pem --host mongodb3 --port 30003 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb_init:
    container_name: mongodb_init
    image: mongo:4.2.10
    restart: "no"
    hostname: 'mongodb_init'
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    volumes:
      - ./certificate:/etc/ssl
    entrypoint: >
      bash -c "
        for i in `seq 1 30`; do
          mongo --ssl --sslCAFile /etc/ssl/ca.crt --sslPEMKeyFile /etc/ssl/mongo.pem --host mongodb1 --port 30001 --eval 'printjson(rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongodb1:30001\"},{_id:1,host:\"mongodb2:30002\"},{_id:2,host:\"mongodb3:30003\"}]}))' && break || echo 'Retrying in 5 secs...' && sleep 5;
        done;
        mongo --ssl --sslCAFile /etc/ssl/ca.crt --sslPEMKeyFile /etc/ssl/mongo.pem --host mongodb1 --port 30001 --eval 'rs.status()'
      "
    networks:
      - mongodb_network

volumes:
  mongodb1_data:
    driver: local
  mongodb2_data:
    driver: local
  mongodb3_data:
    driver: local

networks:
  mongodb_network:
    name: mongodb_network
    driver: bridge
