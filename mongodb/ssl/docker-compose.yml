services:
  mongodb1:
    container_name: mongodb1
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb1'
    cpus: 1.0
    mem_limit: 1g
    volumes:
      - mongodb1_data:/data/db
      - ./certificate:/etc/ssl:ro
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "30001:30001"
    environment:
      - PORT=30001
    entrypoint: ["/docker-entrypoint-initdb.d/start.sh"]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb1:30001\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb2:
    container_name: mongodb2
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb2'
    cpus: 1.0
    mem_limit: 1g
    volumes:
      - mongodb2_data:/data/db
      - ./certificate:/etc/ssl:ro
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "30002:30002"
    environment:
      - PORT=30002
    entrypoint: ["/docker-entrypoint-initdb.d/start.sh"]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb2:30002\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb2 --port 30002 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb3:
    container_name: mongodb3
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb3'
    cpus: 1.0
    mem_limit: 1g
    volumes:
      - mongodb3_data:/data/db
      - ./certificate:/etc/ssl:ro
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "30003:30003"
    environment:
      - PORT=30003
    entrypoint: ["/docker-entrypoint-initdb.d/start.sh"]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb3:30003\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb3 --port 30003 --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb_init:
    container_name: mongodb_init
    image: mongo:4.2.10
    hostname: 'mongodb_init'
    volumes:
      - ./certificate:/etc/ssl:ro
      - ./init-scripts:/docker-entrypoint-initdb.d
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    entrypoint: ["/docker-entrypoint-initdb.d/init.sh"]
    networks:
      - mongodb_network

volumes:
  mongodb1_data:
    driver: local
  mongodb2_data:
    driver: local
  mongodb3_data:
    driver: local

networks:
  mongodb_network:
    name: mongodb_network
    driver: bridge
