services:
  mongodb1:
    container_name: mongodb1
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb1'
    cpus: 1.0
    mem_limit: 1g
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - ./certificate:/etc/ssl:ro
      - mongodb1_data:/data/db
    ports:
      - "30001:30001"
    command: [
      "mongod",
      "--replSet", "rs0",
      "--bind_ip_all",
      "--port", "30001",
      "--tlsMode", "requireTLS",
      "--tlsCertificateKeyFile", "/etc/ssl/mongodb1/mongodb1.pem",
      "--tlsCAFile", "/etc/ssl/ca.crt"
    ]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb1:30001\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root --authenticationDatabase admin --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb2:
    container_name: mongodb2
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb2'
    cpus: 1.0
    mem_limit: 1g
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - ./certificate:/etc/ssl:ro
      - mongodb2_data:/data/db
    ports:
      - "30002:30002"
    command: [
      "mongod",
      "--replSet", "rs0",
      "--bind_ip_all",
      "--port", "30002",
      "--tlsMode", "requireTLS",
      "--tlsCertificateKeyFile", "/etc/ssl/mongodb2/mongodb2.pem",
      "--tlsCAFile", "/etc/ssl/ca.crt"
    ]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb2:30002\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb2 --port 30002 -u root -p root --authenticationDatabase admin --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb3:
    container_name: mongodb3
    image: mongo:4.2.10
    restart: always
    hostname: 'mongodb3'
    cpus: 1.0
    mem_limit: 1g
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - ./certificate:/etc/ssl:ro
      - mongodb3_data:/data/db
    ports:
      - "30003:30003"
    command: [
      "mongod",
      "--replSet", "rs0",
      "--bind_ip_all",
      "--port", "30003",
      "--tlsMode", "requireTLS",
      "--tlsCertificateKeyFile", "/etc/ssl/mongodb3/mongodb3.pem",
      "--tlsCAFile", "/etc/ssl/ca.crt"
    ]
    healthcheck:
      test: "test $$(echo 'rs.status().members.find(m => m.name === \"mongodb3:30003\" && (m.stateStr === \"PRIMARY\" || m.stateStr === \"SECONDARY\")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb3 --port 30003 -u root -p root --authenticationDatabase admin --quiet) -eq 1"
      interval: 10s
      retries: 5
    networks:
      - mongodb_network

  mongodb_init:
    container_name: mongodb_init
    image: mongo:4.2.10
    hostname: 'mongodb_init'
    volumes:
      - ./certificate:/etc/ssl:ro
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    entrypoint: >
      bash -c "
        while ! mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root --authenticationDatabase admin --eval 'db.runCommand({ping: 1})'; do
          echo 'Waiting for mongodb1 to be ready...'
          sleep 5
        done;
        echo 'Initiating replica set...'
        mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root --authenticationDatabase admin --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongodb1:30001\"}, {_id: 1, host: \"mongodb2:30002\"}, {_id: 2, host: \"mongodb3:30003\"}]});'
        echo 'Replica set initiated.'
        mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root --authenticationDatabase admin --eval 'rs.status()'
      "
    networks:
      - mongodb_network

volumes:
  mongodb1_data:
    driver: local
  mongodb2_data:
    driver: local
  mongodb3_data:
    driver: local

networks:
  mongodb_network:
    name: mongodb_network
    driver: bridge
