mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 --eval 'rs.status()'
mongo --tls --tlsAllowInvalidHostnames --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 --eval 'rs.status()'
mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root --authenticationDatabase admin --eval 'rs.initiate({_id:"rs0",members:[{_id:0,host:"mongodb1:30001"},{_id:1,host:"mongodb2:30002"},{_id:2,host:"mongodb3:30003"}]})'

####### login in container
- mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 -u root -p root
- rs.status()

####### healthcheck
echo 'rs.status().members.find(m => m.name === "mongodb1:30001" && (m.stateStr === "PRIMARY" || m.stateStr === "SECONDARY")) ? 1 : 0' | mongo --tls --tlsCAFile /etc/ssl/ca.crt --tlsCertificateKeyFile /etc/ssl/client/client.pem --host mongodb1 --port 30001 --quiet


####### connect from robo3t
mongodb://root:root@10.1.0.228:30001,10.1.0.228:30002,10.1.0.228:30003/?replicaSet=rs0&tls=true&tlsCAFile=/Users/tavogus/dev/docker/mongodb/ssl/certificate/ca.crt&tlsCertificateKeyFile=/Users/tavogus/dev/docker/mongodb/ssl/certificate/client/client.pem